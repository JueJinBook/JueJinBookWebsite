"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["9087"],{986993:function(e,n,r){r.r(n),r.d(n,{default:()=>o});var s=r(552676),i=r(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",blockquote:"blockquote",code:"code",h4:"h4",pre:"pre",strong:"strong",ul:"ul",li:"li"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"41聚合阶段",children:["41.聚合阶段",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41聚合阶段",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"62-聚合阶段",children:["6.2 聚合阶段",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#62-聚合阶段",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"621-聚合阶段介绍",children:["6.2.1 聚合阶段介绍",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#621-聚合阶段介绍",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"聚合阶段是聚合管理流水线作业的组成单元，是一个个功能节点，有的可以联表lookup、有的可以组合group、有的可以拆分unwind等等。每个聚合阶段可以使用表达式、操作符对输入文档进行计算综合、均值、拼接、分割、转换格式等操作，操作完成之后会输出给下一个阶段，直到end返回结果。"}),"\n",(0,s.jsx)(n.p,{children:"聚合阶段有哪些，每个聚合阶段它又充当什么样的功能呢？我们把聚合阶段以及相关说明列举如下，这里可以结合一下工厂流水线去理解输入文档与输出文档："}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"因为聚合可以将进入到聚合流水线的记录列表进行拆分、添加/删除字段、分组、提取嵌套对象数组里的字段等等，而且记录的_id也可以不再是唯一id，不过这一系列的操作都不会改变数据库里面的记录本身，因此我们描述聚合流水线的记录用“文档”会更加合适一些。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"622-聚合阶段介绍",children:["6.2.2 聚合阶段介绍",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#622-聚合阶段介绍",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在上一节，我们简单写了一个聚合的案例，一个聚合管道流水线从",(0,s.jsx)(n.code,{children:"aggregate()"}),"发起聚合操作开始，到",(0,s.jsx)(n.code,{children:"end()"}),"结束聚合操作为止，经过了多个聚合阶段，而聚合阶段到底有哪些功能，使用需要注意一些什么，我们接下来进行一一拆解："]}),"\n",(0,s.jsxs)(n.h4,{id:"1match匹配",children:["1、match匹配",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1match匹配",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["match是根据条件过滤文档，进行的是查询匹配，语法和where比较类似。match和其他聚合阶段不同，只能用查询操作符",(0,s.jsx)(n.code,{children:"_"}),"，不能使用聚合操作符；在写聚合时，应尽可能的把match放在流水线的前面，提早过滤文档，减少其他聚合阶段的数据量，可以提升聚合的速度，而且可以使用索引来加快查询。建议match之后的输出数据最好小于100M（主要是Group有内存限制）。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们在写match时，可以参考前面所学习的where查询以及查询操作符的用法，两者之间比较一致，但是你不能写成",(0,s.jsx)(n.code,{children:".aggregate().where()"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"//凡是写聚合都建议先声明这三个变量，后面也是如此，就不再多介绍了\nconst db = wx.cloud.database()\nconst _ = db.command\nconst $ = db.command.aggregate\n\ndb.collection('china').aggregate()\n.match({\n  gdp: _.gt(3000) \n})\n.project({\n  _id:0  //不显示_id字段\n})\n.end()\n.then(res=>{console.log(res.list)})\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"2project投射",children:["2、project投射",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2project投射",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"project有点类似于查询条件里的field（使用0舍弃字段，使用1包含字段），但是相比于field而言，聚合里中的project投射操作更加强大。使用project还可以从子文档中提取字段，可以重命名字段，也可以使用点表示法来舍弃或包含多层嵌套的字段。"}),"\n",(0,s.jsx)(n.p,{children:"前面介绍的match可以过滤到不符合条件的记录，减少各聚合阶段的记录数，从而提升聚合的效率；那project也可以过滤掉不需要的字段，尤其是字段比较多而复杂的记录而言。"}),"\n",(0,s.jsx)(n.p,{children:"project可以根据表达式、操作符来添加一个新字段，也可以重置（覆盖）已有的字段。就好像Excel里，已有列A和列B，新增一个列C，列C的数据是基于列A或列B的数据进行公式化处理后的结果，也可以把新数据直接覆盖到列A和列B。"}),"\n",(0,s.jsx)(n.p,{children:"比如以下案例我们仍然以上一章的中国经济数据为例，已知城市gdp，以及城市的常住人口，我们希望聚合给出的字段为中文而不是英文，而且还要给出数据库里没有的数据“人均GDP”，而“人均GDP”可以根据“gdp/常住人口”计算出来："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"db.collection('china').aggregate()\n.project({\n  _id:0,  //用0或false来去掉_id字段，_id就不会显示啦\n  city: 1, //用1或true来\n  gdp: 1,\n  \"常住人口\":'$reg_pop',\n  \"人均GDP\": $.divide([$.multiply(['$gdp',10000]), '$reg_pop'])\n  })\n.end()\n.then(res => console.log(res))\n.catch(err => console.error(err))\n"})}),"\n",(0,s.jsx)(n.p,{children:"这里，“常住人口”是已有字段进行了重命名，而“人均GDP”是新创建的字段，字段的值是基于已有字段进行表达式换算而来，当然无论是重命名还是新建字段都不会影响原有的数据库（不会写入数据库）。"}),"\n",(0,s.jsxs)(n.h4,{id:"3group分组",children:["3、group分组",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3group分组",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"group可以将输入记录按给定表达式进行分组，输出时每个记录代表一个分组，每个记录的_id是区分不同组的key，group输出的文档是没有顺序的。比如我们可以看以下表格："}),"\n",(0,s.jsxs)(n.p,{children:["原有的表格的_id是",(0,s.jsx)(n.code,{children:"user001"}),"这种唯一值，但是我们可以使用group把记录进行按照性别或班级来分组，如果按性别分组，_id的值就是",(0,s.jsx)(n.code,{children:"男"}),"、",(0,s.jsx)(n.code,{children:"女"}),"，按班级来分组，_id的值就是",(0,s.jsx)(n.code,{children:"一班"}),"、",(0,s.jsx)(n.code,{children:"二班"}),"、",(0,s.jsx)(n.code,{children:"三班"}),"，既然_id由唯一值，变为重复值，group就可以统计记录中有多少个重复值，也可以按照新分组，将语文、数学、外语这三个字段里面的值按照一定的表达式重新计算，比如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"db.collection('user').aggregate()\n.group({\n  _id: '$gender',   //按性别来分组，相当于去重，或者获取唯一值\n  chinese:$.sum('$chinese'),  //男生、女生的语文总分分别是多少\n  mathavg:$.avg('$math'),    //男生、女生的数学平均分分别是多少\n  engmax:$.max('$english'),  //男生、女生的英语最高分分别是多少\n  count:$.sum(1)             //这个是count聚合阶段，后面也会有介绍，指的是男生、女生各有多少人\n})\n.end()\n.then(res => console.log(res.list))\n.catch(err => console.error(err))\n\n//输出的结果如下\n[{\n  _id: \"男\"\n  chinese: 227\n  mathavg: 84.66666666666667\n  engmax: 81\n  count: 3\n},{\n  _id: \"女\"\n  chinese: 87\n  mathavg: 89\n  engmax: 75\n  count: 1\n}]\n"})}),"\n",(0,s.jsx)(n.p,{children:"从以上案例可以看到，我们可以了解到Group的分组结合累计器操作符，可以按输入文档的一整列（不是通常的按行）来统计总和sum、平均avg、最大值max、最小值min，这些都是累计器操作符的应用（关于累计器操作符后面会详细介绍）；除此之外，还可以去重（获取唯一值）以及结合count聚合阶段统计分组重复数量。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["group聚合阶段，必须要有_id，也就是说",(0,s.jsx)(n.code,{children:'group({_id:""})'}),"，里面的_id是不能少的。如果少了，会报",(0,s.jsx)(n.code,{children:"a group specification must include an _id"}),"的错误。_id的值可以填null，也可以填其他不相干的值，如果你填写的",(0,s.jsx)(n.code,{children:"$+字段名"}),"就会按这个字段的值进行分组，如果传入的是两个",(0,s.jsx)(n.code,{children:"$+字段名"}),"，则会按多个值分组。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"4count计算",children:["4、count计算",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4count计算",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["注意，count的用法和普通数据查询里面的count的",(0,s.jsx)(n.code,{children:"where({}).count()"}),"是",(0,s.jsx)(n.strong,{children:"不一样"}),"的，",(0,s.jsx)(n.strong,{children:"不能写成"}),(0,s.jsx)(n.code,{children:".aggregate().count()"}),"，而是要结合group来使用。比如下面是我们查询GDP大于3000亿元的城市的数量："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"db.collection('china').aggregate()\n.match({\n  gdp: _.gt(3000)\n})\n.group({\n  _id:null,\n  count:$.sum(1)\n})\n.end()\n.then(res=>{console.log(res.list)})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["返回的结果如下所示，这里的_id是没有实际意义的，所以用null，你也可以写成其他值，比如'citynum'，也可以使用",(0,s.jsx)(n.code,{children:".project({_id:0})"}),"把_id去掉。这里的count，就是符合条件的城市数量为63个："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[{\n  _id: null\n  count: 63\n}]\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"4unwind拆分数组",children:["4、unwind拆分数组",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4unwind拆分数组",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"unwind聚合阶段可以拆分数组以及嵌套数组，拆分时还可以通过设置includeArrayIndex保留数组元素的索引。拆分之后，一个文档会变成一个或多个文档，分别对应数组的每个元素。"}),"\n",(0,s.jsx)(n.p,{children:"我们还是以之前的数据为例，这里的books是数组，books里面的每一个元素都是用户喜欢的一本本书:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  _id:"user001",\n  books:[{\n    "title": "JavaScript高级程序设计(第3版)", \n    "publishInfo": {\n      "press": "人民邮电出版社",\n    }\n  },{\n    "title": "JavaScript权威指南(第6版)",\n    "publishInfo": {\n      "press": "机械工业出版社",\n    }\n  }]\n},{\n  _id:"user002",\n  books:[{\n    "title": "Python编程从入门到实践", \n    "publishInfo": {\n      "press": "人民邮电出版社",\n    }\n  },{\n    "title": "高性能MySQL（第3版）",\n    "publishInfo": {\n      "press": "电子工业出版社"\n    },\n  },{\n    "title": "JavaScript高级程序设计(第3版)", \n    "publishInfo": {\n      "press": "人民邮电出版社",\n    }\n  }]\n} \n'})}),"\n",(0,s.jsx)(n.p,{children:"我们如果对数组里面的数据进行统计，比如每本书，有多少人喜欢？用户最喜欢哪个出版社出的书？等等，这些都需要我们把数组进行拆分："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"db.collection('user').aggregate()\n  .unwind({\n    path:'$books',              \n    includeArrayIndex:'index',  //\n  })  \n  .end()\n  .then(res => console.log(res))\n  .catch(err => console.error(err))\n"})}),"\n",(0,s.jsx)(n.p,{children:"经过unwind拆分之后，输入文档由之前的2个变成了5个，一个books数组里有多少个元素，就会拆分出多少个文档，而且_id的值不变，而index则表示的元素在相应的数组里的index，拆分后的文档大致如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{_id: "user001",books: {...},index: 0}\n{_id: "user001",books: {...},index: 1}\n{_id: "user002",books: {...},index: 0}\n{_id: "user002",books: {...},index: 1}\n{_id: "user002",books: {...},index: 2}\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"5replaceroot指定根节点",children:["5、replaceRoot指定根节点",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5replaceroot指定根节点",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["replaceRoot指定一个已有字段作为输出的根节点，也可以指定一个计算出的新字段作为根节点，所谓根节点就是提升到root的级别，会",(0,s.jsx)(n.strong,{children:"替换掉输入文档中所有其他的字段"}),"，包括_id，只输出指定的根节点字段，比较适合用来",(0,s.jsx)(n.strong,{children:"提取嵌套对象"}),"以及你只想要最关键的信息。"]}),"\n",(0,s.jsxs)(n.p,{children:["需要注意的是，replaceRoot指定的字段（或者嵌套字段）需要是文档对象，不然会这样的错误：",(0,s.jsx)(n.code,{children:"'newRoot' expression must evaluate to an object"}),"。如果是数组里面嵌套的对象，我们可以先使用unwind拆分数组之后再使用replaceRoot，还是以之前用户喜欢的书籍的数据为例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"db.collection('user').aggregate()\n.unwind({\n  path: '$books',\n  includeArrayIndex: 'index'\n})\n.replaceRoot({\n  newRoot: '$books' //将books里面的数据提取出来，成为根节点\n})\n.end()\n.then(res => console.log(res))\n.catch(err => console.error(err))\n"})}),"\n",(0,s.jsx)(n.p,{children:"直接就可以把books对象作为根节点，使用replaceRoot之后，其他不在books对象里的字段就会被丢弃（比如_id）："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{publishInfo: {press: "人民邮电出版社"},title: "JavaScript高级程序设计(第3版)"}\n{publishInfo: {press: "机械工业出版社"},title: "JavaScript权威指南(第6版)"}\n{publishInfo: {press: "人民邮电出版社"},title: "Python编程从入门到实践"}\n{publishInfo: {press: "电子工业出版社"},title: "高性能MySQL（第3版）"}\n{publishInfo: {press: "人民邮电出版社"},title: "JavaScript高级程序设计(第3版)"}\n'})}),"\n",(0,s.jsx)(n.p,{children:"如果在replaceRoot阶段中，输入文档有的没有books对象这个字段，那你需要在replaceRoot前将这些文档给过滤掉才行，和查询匹配里筛选掉不存在某个字段的用法是一样的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:".match({\n  books:_.exist(true)\n})\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"6lookup联表查询",children:["6、lookup联表查询",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6lookup联表查询",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"lookup联表查询只支持云函数端，它可以连接同一个数据库下的其他指定集合，也就是跨集合关联匹配查询。而匹配的方式有两种，一是将输入记录的一个字段和被连接集合的一个字段进行相等匹配；二是指定除相等匹配之外的连接条件，比如指定多个相等匹配条件，或需要拼接被连接集合的子查询结果，两种方式的语法有所不同，下面只以第一种方式为例。"}),"\n",(0,s.jsx)(n.p,{children:"比如下面的案例，我们把用户上传网盘的数据存储到两个集合里，下面是存储用户信息的集合user，其中file是一个数组，是用户存储的文件id："}),"\n",(0,s.jsx)(n.p,{children:"下面是存储文件信息的集合files，user集合和file集合之间有一个关联的数据，那就是文件的id，这也是我们进行lookup联表查询的基础："}),"\n",(0,s.jsx)(n.p,{children:"可以将以上的表格导入到云开发数据库，我们用lookup进行联表查询："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV,\n})\nconst db = cloud.database()\nconst _ = db.command  \nconst $ = db.command.aggregate\nexports.main = async (event, context) => {\n  const res = await db.collection('user').aggregate() //这里是以user集合为主集合\n    .lookup({\n      from: 'files',  //要连接的集合名称\n      localField: 'file',  //相对于user集合而言，file就是本地字段\n      foreignField: '_id',  //相对于user集合而言，files集合的_id就是外部字段\n      as: 'bookList',  //指定匹配之后的数据存放在哪个字段\n    })\n  .end()\n  return res.list\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"使用lookup聚合之后，files集合里面关于文件的信息就被匹配到了user文档里面了，而匹配的结果在bookList字段内："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'[{\n  "_id":"author10001",\n  "file":["file200001","file200002","file200003"],\n  "male":"female",\n  "name":"小云",\n  "bookList":[\n    {\n      "_id":"file200001","categories":"PDF文档","size":"16M","title":"云开发实战指南.pdf"\n      },\n    {\n      "_id":"file200002","categories":"Word文档","size":"2M","title":"云数据库性能优化.doc"\n    },\n    {\n      "_id":"file200003","categories":"Word文档","size":"4M","title":"云开发入门指南.doc"\n    }]\n  },\n{\n  "_id":"author10002",\n  "male":"male",\n  "name":"小开",\n  "file":["file200001","file200004"],\n  "bookList":[\n    {\n      "_id":"file200001","categories":"PDF文档","size":"16M","title":"云开发实战指南.pdf"\n    },\n    {\n      "_id":"file200004","categories":"Word文档","size":"4M","title":"云函数实战.doc"\n    }]\n  }]\n'})}),"\n",(0,s.jsx)(n.p,{children:"聚合阶段还有随机从文档中选取指定数量的记录的sample、根据给定条件和边界划分成不同组的bucket和bucketAuto，以及添加新字段的addFields等等，这里就不单独介绍啦。"}),"\n",(0,s.jsxs)(n.h3,{id:"623-简单的排名案例",children:["6.2.3 简单的排名案例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#623-简单的排名案例",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"互动类的应用经常会需要开发一些排行榜，排行榜使用普通查询的Orderby也可以做，但是如果你需要根据某个人的id查他的排名，或者根据排名查他的具体信息，就相对来说会比较难一些，而使用聚合查询就可以轻松做到。我们以在group分组部分介绍的表格数据为例，比如我们想查语文成绩的排名，以及可以根据名次和用户id查相应的信息："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"db.collection('user').aggregate()\n  .sort({\n    chinese:-1  //降序，\n  })\n  .group({\n    _id:null,\n    users:$.push('$$ROOT') \n  })\n  .unwind({\n    path: '$users',\n    includeArrayIndex: 'rank' //将数组的index提取到rank字段\n  })\n  .project({\n    _id:0,\n    users:'$users',\n    rank:$.add(['$rank', 1]),\n  })\n  .addFields({\n    'users.rank':'$rank',  //将rank排名写进users对象\n  })\n  .match({\n    \"users._id\":\"user001\" //根据用户id查相应的数据\n    //\"rank\":3   通过这个条件可以根据排名查对应的用户   \n  })\n  .end()\n  .then(res => console.log(res))\n  .catch(err => console.error(err))\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"在使用聚合时，我们可以一个聚合阶段一个聚合阶段挨个打印，只有在了解了每个聚合阶段的输出文档的结构之后，再去写下一个聚合阶段，这样就不会出错了；"}),"\n",(0,s.jsxs)(n.li,{children:["要做数据的排行榜，我们可以先使用group的",(0,s.jsx)(n.code,{children:"$.push('$$ROOT')"}),"将多个转成一个数组，类似于Excel里面的将一列n行数据，转换成一行n列数据；方便我们进行unwind取出index，因为经过sort排序之后的index就是排名，只是排名是从0开始的；"]}),"\n",(0,s.jsx)(n.li,{children:"聚合有很多方法可以添加新的字段，比如project、group等等，而addFields最大的不同就是可以将字段使用点表示法添加到已有的对象里面。"}),"\n",(0,s.jsx)(n.li,{children:"最后再次使用match，我们可以根据用户id查排名以及用户信息，也可以根据排名来查用户信息；"}),"\n"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let o=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F41.%E8%81%9A%E5%90%88%E9%98%B6%E6%AE%B5.md"]={toc:[{text:"6.2 聚合阶段",id:"62-聚合阶段",depth:2},{text:"6.2.1 聚合阶段介绍",id:"621-聚合阶段介绍",depth:3},{text:"6.2.2 聚合阶段介绍",id:"622-聚合阶段介绍",depth:3},{text:"1、match匹配",id:"1match匹配",depth:4},{text:"2、project投射",id:"2project投射",depth:4},{text:"3、group分组",id:"3group分组",depth:4},{text:"4、count计算",id:"4count计算",depth:4},{text:"4、unwind拆分数组",id:"4unwind拆分数组",depth:4},{text:"5、replaceRoot指定根节点",id:"5replaceroot指定根节点",depth:4},{text:"6、lookup联表查询",id:"6lookup联表查询",depth:4},{text:"6.2.3 简单的排名案例",id:"623-简单的排名案例",depth:3}],title:"41.聚合阶段",headingTitle:"41.聚合阶段",frontmatter:{}}}}]);