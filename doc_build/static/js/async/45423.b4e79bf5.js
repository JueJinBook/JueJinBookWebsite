"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["45423"],{708495:function(n,e,r){r.r(e),r.d(e,{default:()=>d});var i=r(552676),s=r(740453);let t=r.p+"static/image/0be7c313087e50eba997c40657d4b3ed.b4f1c72c.png",c=r.p+"static/image/49a5cbd810168fb1efa7a9c6d674b63e.ccae5a57.png",o=r.p+"static/image/5931b8b0fed7b7792364fa3711192e62.0afa99e3.png",p=r.p+"static/image/81e3830763db977de9ff1e20fa8fd67c.34d05e8b.png";function l(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",img:"img",code:"code",ul:"ul",li:"li",strong:"strong",blockquote:"blockquote",pre:"pre"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"20框架解析single-spa-的-script-示例",children:["20.框架解析：single-spa 的 Script 示例",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#20框架解析single-spa-的-script-示例",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"在上一个课程中，我们讲解了 single-spa 的运行机制并详细讲解了 NPM 方案的设计示例。本课程我们会重点讲解动态 Script 示例，从而加深我们对于 single-spa 的理解和使用。"}),"\n",(0,i.jsxs)(e.h2,{id:"为什么需要-single-spa",children:["为什么需要 single-spa",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么需要-single-spa",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["虽然上一个课程中我们重点讲解了 single-spa 的内部运行机制和使用示例，但是很多同学可能不清楚 single-spa 的适用场景。我们来回顾一下没有使用 single-spa 之前的",(0,i.jsx)(e.a,{href:"https://juejin.cn/book/7258893482318626868/section/7259192719166144547",target:"_blank",rel:"noopener noreferrer",children:"方案了解：动态 Script 方案"})," ："]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:["在动态 Script 方案的主应用示例代码 ",(0,i.jsx)(e.a,{href:"https://github.com/ziyi2/micro-framework/blob/demo/dynamic-script/public/main/index.html#L164",target:"_blank",rel:"noopener noreferrer",children:"main/index.html"})," 中手动实现了对 Hash 路由的监听和微应用资源的 ",(0,i.jsx)(e.code,{children:"<script>"})," 加载和缓存，但是该代码没有形成通用的解决方案："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"微应用没有维护状态"}),"：Hash 路由变化前没有记录微应用的资源请求情况、已加载和未加载等应用状态，卸载应用和加载应用的时候没有微应用状态作为判断依据（例如已加载的应用不需要再次加载，未加载的应用不需要卸载）"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"微应用没有生命钩子"}),"：如果想要在某应用加载、挂载或者卸载前执行一些前置逻辑，需要在主应用中通过硬编码来实现，没有通用的钩子处理方式"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"微应用没有规范的生命周期"}),"：微应用对外提供的加载和卸载函数在主应用中需要通过强耦合的方式获取并进行参数传递执行，没有对微应用的生命周期命名和获取形成通用的规则"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"如何适配 SPA 框架"}),'：在 React 或者 Vue 框架中切换路由时，如何避免内部框架的路由监听执行和外部用于切换微应用的路由监听执行不会形成"竞争条件"，如何确保框架的监听逻辑先执行，外部切换微应用的监听逻辑后执行']}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"single-spa\xa0提供了上述这些问题的通用解决方案，可以很好的适配\xa0React\xa0以及\xa0Vue\xa0等具备路由的\xa0SPA\xa0应用框架。"}),"\n",(0,i.jsxs)(e.h2,{id:"如何获取生命周期函数",children:["如何获取生命周期函数",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#如何获取生命周期函数",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["在上一个课程中我们通过\xa0",(0,i.jsx)(e.code,{children:"import()"})," 引入了各个微应用的生命周期函数，这种模块化的加载方式在动态\xa0Script\xa0以及\xa0Fetch\xa0请求等加载方式上并不适用，因为模块化天然可以通过模块作用域进行生命周期函数的隔离。"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["温馨提示：本课程所说的动态\xa0Script\xa0不包括\xa0",(0,i.jsx)(e.code,{children:'<script\xa0type="module">'}),"\xa0。Fetch\xa0请求是指通过\xa0HTTP\xa0请求获取微应用的脚本字符串，然后通过\xa0",(0,i.jsx)(e.code,{children:"eval"})," 或者\xa0",(0,i.jsx)(e.code,{children:"new\xa0Function"})," 的方式进行动态执行。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["以动态 Script 为例，主应用通过 ",(0,i.jsx)(e.code,{children:"<script>"}),"\xa0标签加载和执行了微应用的\xa0JS\xa0脚本后，如何获取微应用的生命周期函数呢？如果同时加载两个微应用，如何确保这两个微应用的生命周期函数可以像模块化作用域一样不会产生命名冲突。为此我们需要思考如何在动态\xa0Script 中获取生命周期函数，并且能够形成通用的解决方案。"]}),"\n",(0,i.jsxs)(e.p,{children:["我们先来回顾一下没有使用\xa0single-spa\xa0的动态\xa0Script\xa0方案。在",(0,i.jsx)(e.a,{href:"https://juejin.cn/book/7258893482318626868/section/7259192719166144547",target:"_blank",rel:"noopener noreferrer",children:"方案了解：动态\xa0Script\xa0方案"}),"的示例\xa0",(0,i.jsx)(e.a,{href:"https://github.com/ziyi2/micro-framework/blob/demo/dynamic-script/public/micro/micro1.js#L5",target:"_blank",rel:"noopener noreferrer",children:"micro/micro1.js"})," 和\xa0",(0,i.jsx)(e.a,{href:"https://github.com/ziyi2/micro-framework/blob/demo/dynamic-script/public/micro/micro2.js#L5",target:"_blank",rel:"noopener noreferrer",children:"micro/micro2.js"}),"\xa0中约定了两个微应用的简单生命周期函数，如下所示："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"  // 在全局对象上挂载 micro1_mount 属性（微应用 1 的生命周期函数）\n  window.micro1_mount = function (el) {};\n\n  // 在全局对象上挂载 micro1_unmount 属性（微应用 1 的生命周期函数）\n  window.micro1_unmount = function () {};\n\n  // 在全局对象上挂载 micro2_mount 属性（微应用 2 的生命周期函数）\n  window.micro2_mount = function (el) {};\n\n  // 在全局对象上挂载 micro2_unmount 属性（微应用 2 的生命周期函数）\n  window.micro2_unmount = function () {};\n"})}),"\n",(0,i.jsx)(e.p,{children:"在主应用的服务端需要通过耦合的方式获取微应用约定的生命周期函数，如下所示："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'app.post("/microapps", function (req, res) {\n  res.json([\n    {\n      name: "micro1",\n      id: "micro1",\n      script: `http://${host}:${port.micro}/micro1.js`,\n      style: `http://${host}:${port.micro}/micro1.css`,\n      // 微应用 1 的生命周期函数\n      mount: "micro1_mount",\n      // 微应用 1 的生命周期函数\n      unmount: "micro1_unmount",\n      prefetch: true,\n    },\n    {\n      name: "micro2",\n      id: "micro2",\n      script: `http://${host}:${port.micro}/micro2.js`,\n      style: `http://${host}:${port.micro}/micro2.css`,\n      // 微应用 2 的生命周期函数\n      mount: "micro2_mount",\n      // 微应用 2 的生命周期函数\n      unmount: "micro2_unmount",\n      prefetch: true,\n    },\n  ]);\n'})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["温馨提示：如果不是服务端接口返回动态数据，则需要主应用的前端进行硬编码调用 ",(0,i.jsx)(e.code,{children:"window.micro1_mount"}),"，这样耦合的程度更高，不利于微应用的动态增加和删除。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"上述设计方案虽然能够实现主应用调用微应用的生命周期函数来实现应用的挂载和卸载，但是会存在如下问题："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"全局属性命名冲突"}),"：一旦微应用越来越多，容易导致生命周期函数的命名冲突"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"缺少命名规范"}),"：微应用的生命周期函数缺少统一的命名规范，无法形成通用的获取方案"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"主应用和微应用耦合"}),"：服务端或者前端主应用需要知晓每一个微应用定义的生命周期函数"]}),"\n"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["温馨提示：能否有一种通用的解耦设计方案，可以去除上述服务端微应用接口中的 ",(0,i.jsx)(e.code,{children:"mount"})," 和 ",(0,i.jsx)(e.code,{children:"unmount"})," 生命周期函数名称配置。当主应用加载和执行了相应微应用的 JS 脚本之后，可以通过这种通用的方案立即获取微应用的生命周期函数。通用设计方案的目的就是减少主应用和微应用的耦合程度，从而节省微前端的维护成本。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["在上一个课程中，我们知道 single-spa\xa0约定了微应用生命周期函数的命名规范，包括\xa0",(0,i.jsx)(e.code,{children:"mount"}),"、",(0,i.jsx)(e.code,{children:"unmount"}),"、",(0,i.jsx)(e.code,{children:"bootstrap"}),"、",(0,i.jsx)(e.code,{children:"update"}),"\xa0等，因此在\xa0single-spa\xa0中使用动态\xa0Script\xa0方案时，需要微应用准备上述生命周期函数，从而可以被主应用识别和获取。由于通过 ",(0,i.jsx)(e.code,{children:"<script>"})," 标签在运行时加载微应用，考虑到主应用和微应用的执行共用同一个全局对象 ",(0,i.jsx)(e.code,{children:"window"}),"，我们可以通过 ",(0,i.jsx)(e.code,{children:"window"})," 对象来实现两者的连接，可实行的方案包括："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"为每个微应用设置全局属性存储生命周期函数，主应用识别获取"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"每个微应用通过通信的方式将生命周期函数传递给主应用"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"建立全局的微应用生命周期函数映射，主应用从映射中获取"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"我们可以通过简单的示例来了解实现细节，例如为每个微应用设置全局属性存储生命周期函数："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"\n// 微应用代码\nconst lifeCycle = {\n  bootstrap: () => Promise.resolve(),\n  mount: () => Promise.resolve(),\n  unmount: () => Promise.resolve(),\n};\n\n// 微应用在初始化时设置全局属性存储生命周期函数对象\nwindow[`singleSpaLifecycle-${appName}`] = lifeCycle;\n\n\n// 主应用代码\nsingleSpa.registerApplication({\n  name: 'micro-app-1',\n  app: () => loadMicroApp('micro-app-1'),\n  activeWhen: '/micro-app-1',\n});\n\nfunction loadMicroApp(appName) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    // 微应用的入口文件\n    script.src = `path/to/${appName}/entry.js`; \n    script.onload = () => {\n      // 从全局对象上获取生命周期函数\n      resolve(window[`singleSpaLifecycle-${appName}`]); \n    };\n    script.onerror = reject;\n    document.head.appendChild(script);\n  });\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["上述方式需要为每一个微应用设置全局属性存储生命周期函数，微应用一旦增多会面临着 ",(0,i.jsx)(e.code,{children:"appName"})," 重复的问题，从而导致全局属性冲突而产生隐患。如果希望避免全局属性冲突，那么可以通过通信的方式将生命周期函数传递给主应用，例如："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"\n// 微应用代码\nconst lifeCycle = {\n  bootstrap: () => Promise.resolve(),\n  mount: () => Promise.resolve(),\n  unmount: () => Promise.resolve(),\n};\n// 微应用在初始化时通过自定义事件传递生命周期函数对象\nconst event = new CustomEvent('singleSpaLifecycle', { \n  detail: { \n    appName: 'micro-app-1', \n    lifeCycle \n  } \n});\nwindow.dispatchEvent(event);\n\n// 主应用代码\nsingleSpa.registerApplication({\n  name: 'micro-app-1',\n  app: () => loadMicroApp('micro-app-1'),\n  activeWhen: '/micro-app-1',\n});\n\n//  监听自定义事件获取生命周期函数对象\nwindow.addEventListener('singleSpaLifecycle', (event) => {\n  // 存储生命周期函数\n});\n\nfunction loadMicroApp(appName) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    // 微应用的入口文件\n    script.src = `path/to/${appName}/entry.js`; \n    script.onload = () => {\n      // 获取生命周期函数\n    };\n    script.onerror = reject;\n    document.head.appendChild(script);\n  });\n}\n"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["温馨提示：通过事件通知的方式获取生命周期函数时，需要注意事件的执行顺序，必须先执行监听事件 ",(0,i.jsx)(e.code,{children:"addEventListener"})," 后触发 ",(0,i.jsx)(e.code,{children:"dispatchEvent"}),"，防止事件发送后丢失。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["事件通信就像硬件设计中的",(0,i.jsx)(e.a,{href:"https://zh.wikipedia.org/wiki/%E9%A3%9E%E7%BA%BF",target:"_blank",rel:"noopener noreferrer",children:"飞线"}),"一样，破坏了代码的常规执行流，可能会使得代码更难理解和维护。为此我们可以设计一个折中的方案，建立一个公共的生命周期函数存储池，用于实现主应用获取微应用的生命周期函数，这样也可以解决全局属性冲突。例如设计一个通用的 SDK："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"// 微应用代码\nimport { registerMicroAppLifecycle }  from 'single-app-lifecycle'\n\n// 微应用在初始化时将生命周期函数对象置入公共存储池\nconst lifeCycle = {\n  bootstrap: () => Promise.resolve(),\n  mount: () => Promise.resolve(),\n  unmount: () => Promise.resolve(),\n};\n\n// 初始化时存储生命周期函数到全局映射中\nregisterMicroAppLifecycle(appName, lifeCycle);\n\n// 主应用代码\nimport { getMicroAppLifecycle,  }  from 'single-app-lifecycle'\n\nsingleSpa.registerApplication({\n  name: 'micro-app-1',\n  app: () => loadMicroApp('micro-app-1'),\n  activeWhen: '/micro-app-1',\n});\n\nfunction loadMicroApp(appName) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    // 微应用的入口文件\n    script.src = `path/to/${appName}/entry.js`; \n    script.onload = () => {\n      // 从全局映射中获取生命周期函数\n      resolve(getMicroAppLifecycle(appName));\n    };\n    script.onerror = reject;\n    document.head.appendChild(script);\n  });\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["其中 ",(0,i.jsx)(e.code,{children:"single-app-lifecycle"})," 中的实现代码如下所示："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'// 需要定义一个防冲突的全局属性（可以配置一些特殊符号，减少命名冲突的概率）\nconst lifeCycleKey = "single-spa-lifecycle-@xxx";\n\n// lifeCycleKey 防冲突检查\nexport function checkLifeCycleKeyConflict() {\n  if (!window[lifeCycleKey]) {\n    window[lifeCycleKey] = new Map();\n    // 用于标识 window[lifeCycleKey] 是一个生命周期函数存储池\n    window[lifeCycleKey].set(lifeCycleKey, lifeCycleKey);\n    return;\n  }\n\n  // 创建之前的冲突检测和创建之后的被覆盖检测\n  if (\n    !window[lifeCycleKey] instanceof Map ||\n    window[lifeCycleKey].get(lifeCycleKey) !== lifeCycleKey\n  ) {\n    // 如果是创建之前已经存在 window[lifeCycleKey]，那么说明 window[lifeCycleKey] 已经被其它程序创建\n    // 如果是创建之后 window[lifeCycleKey] 被覆盖，那么说明 window[lifeCycleKey] 已经被其它程序覆盖\n    throw new Error("window.single-spa-lifecycle-@xxx 存在冲突");\n  }\n}\n\n// 微应用初始化时调用，用于存储生命周期函数\n// 需要注意微应用设置的 app 标识参数仍然是一个耦合项（需要和主应用进行约定）\n// 主应用在调用 getMicroAppLifecycle 时需要传入同样的 app 标识\n// 在后续的方案中我们会讲解如何去除该 app 标识，从而形成彻底的解耦能力\nexport function registerMicroAppLifecycle(app, lifeCycle) {\n  // 防冲突处理（注意这里是实时检测，防止开辟映射以后被覆盖）\n  checkLifeCycleKeyConflict();\n\n  // 如果存储池中已经存在了微应用对应生命周期函数，那么直接报错（防止同名微应用覆盖）\n  // 这种方式可以避免微应用之间的命名冲突\n  if (window[lifeCycleKey].has(app)) {\n    throw new Error(`app: ${app} 已经存在`);\n  }\n\n  // 将微应用的生命周期函数存储到全局变量中\n  window[lifeCycleKey].set(app, lifeCycle);\n}\n\n// 去除微应用的生命周期函数\n// 只有在执行 singleSpa.unloadApplication(\'app1\'); 时需要使用\n// 微应用 unload 之前执行，再次 load 时会重新初始化微应用执行 registerMicroAppLifecycle\nexport function unregisterMicroAppLifecycle(app) {\n  // 防冲突处理（注意这里是实时检测，防止开辟映射以后被覆盖）\n  checkLifeCycleKeyConflict();\n\n  // 如果存储池中不存在该微应用对应生命周期函数，那么直接报错\n  if (!window[lifeCycleKey].has(app)) {\n    throw new Error(`app: ${app} 不存在`);\n  }\n\n  // 将微应用的生命周期函数从全局变量中移除\n  window[lifeCycleKey].delete(app);\n}\n\n// 主应用在加载和执行完微应用后获取生命周期函数\nexport function getMicroAppLifecycle(app) {\n  // 防冲突处理（注意这里是实时检测，防止开辟映射以后被覆盖）\n  checkLifeCycleKeyConflict();\n\n  // 根据 app 标识获取对应的生命周期函数\n  const lifeCycle = window[lifeCycleKey].get(app);\n  if (!lifeCycle) {\n    throw new Error(`app: ${app} 不存在`);\n  }\n  return lifeCycle;\n}\n'})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["温馨提示：上述通用设计方案的思路是建立一个主应用和微应用都能访问的生命周期函数存储池，微应用加载和执行后可以往存储池存放生命周期函数的引用，主应用可以在特定的时机从存储池获取生命周期函数供 signle-spa 执行。需要注意，由于需要存储生命周期函数的引用，因此其它的存储方式例如 ",(0,i.jsx)(e.code,{children:"LocalStorage"})," 不能满足开发诉求。"]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"动态-script-示例",children:["动态 Script 示例",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#动态-script-示例",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["动态 Script 示例采用\xa0",(0,i.jsx)(e.a,{href:"https://monorepo.tools/#understanding-monorepos",target:"_blank",rel:"noopener noreferrer",children:"Monorepo"}),"\xa0对应的\xa0",(0,i.jsx)(e.a,{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Flerna%2Flerna",title:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer",children:"Lerna"}),"\xa0进行设计，整体的目录结构如下所示："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"├── packages                                                                       \n│   ├── main-app/                # 主应用\n│   ├── single-app-lifecycle/    # 用于获取微应用的生命周期函数\n│   ├── react-app/               # React 微应用\n│   ├── single-spa/              # single-spa 5.9.5 版本\n│   └── vue-app/                 # Vue 微应用\n└── lerna.json                   # Lerna 配置\n"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["温馨提示：示例源码可以从 micro-framework 的\xa0",(0,i.jsx)(e.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/single-spa-script",target:"_blank",rel:"noopener noreferrer",children:"demo/single-spa-script"}),"\xa0分支获取。这里为了方便大家了解 single-spa 的源码，引入了 single-spa 的 5.9.5 版本，在主应用\xa0",(0,i.jsx)(e.code,{children:"main-app"}),"\xa0中引入的是 single-spa 的\xa0",(0,i.jsx)(e.code,{children:"src/single-spa.js"}),"\xa0源码，可以方便代码调试。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["动态 Script 方案示例的实现流程如下所示，当主应用切换路由时会先失活没有匹配路由的微应用，执行相应的\xa0",(0,i.jsx)(e.code,{children:"unmount"}),"\xa0函数卸载微应用，然后会激活匹配路由的微应用，动态加载 Script 脚本并通过 ",(0,i.jsx)(e.code,{children:"single-app-lifecycle"})," 获取生命周期函数，最后执行\xa0",(0,i.jsx)(e.code,{children:"mount"}),"\xa0函数挂载应用，从而实现监听路由切换微应用的功能："]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:o,alt:"yuque_diagram.jpg"})}),"\n",(0,i.jsxs)(e.h2,{id:"动态-script-示例---主应用设计",children:["动态 Script 示例 - 主应用设计",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#动态-script-示例---主应用设计",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"首先来看下动态 Script 的实现示例，实现效果如下所示，点击左侧的导航切换路由，使用 single-spa 监听路由的变化来切换微应用："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:c,alt:"录屏2024-01-30 09.25.15.gif"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"温馨提示：上述演示示例中的 Vue 和 React 微应用地址是开发态地址。"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"主应用的目录结构如下所示："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"├── src                  \n│   ├── index.js            # 入口文件，包含了 single-spa 的注册和 React 路由             \n│   ├── App.js              # 主应用布局，包含了导航和内容区的布局设计           \n│   └── utils/              # 工具方法\n│        ├── micros.js      # 微应用数据信息（Mock 后端数据结构）      \n│        └── single-spa.ts  # single-spa 的注册 API 封装\n"})}),"\n",(0,i.jsxs)(e.p,{children:["在\xa0",(0,i.jsx)(e.code,{children:"src/utils/micros.js"}),"\xa0中定义了微应用列表的数据结构（在真实业务场景中这个数据会更复杂，并且可以从服务端进行动态加载），该数据主要用于注册 single-spa 的微应用、生成 React 路由和主应用导航，如下所示："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'// src/utils/micros.js\nimport { IMicroApp } from "../types";\n\n// 微应用容器元素的 ID\nexport const MICRO_APP_CONTAINER_ID = "micro-app-container";\n\nexport const MICRO_APP_ROUTER = {\n  REACT: "react",\n  VUE: "vue",\n};\n\n// 菜单信息，这里用于 Mock 后端数据\n// 真实业务可能是一个树状的带权限的菜单信息\nexport const mockMicroApps: IMicroApp[] = [\n  {\n    // 应用标识\n    name: "react",\n    // 菜单名称\n    title: "React Micro App",\n    // 应用地址（开发态地址）\n    entry: "http://localhost:3000/main.js",\n    // 激活路由\n    router: MICRO_APP_ROUTER.REACT,\n  },\n  {\n    name: "vue",\n    title: "Vue Micro App",\n    entry: "http://localhost:8080/js/app.js",\n    router: MICRO_APP_ROUTER.VUE,\n  },\n];\n'})}),"\n",(0,i.jsx)(e.p,{children:"主应用在初始化时需要消费微应用列表数据，在初始化时使用 single-spa 注册微应用并生成对应的 React 路由："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'// src/index.ts\nimport React from "react";\nimport ReactDOM from "react-dom/client";\nimport "./index.css";\nimport App from "./App.tsx";\nimport reportWebVitals from "./reportWebVitals.js";\nimport { createBrowserRouter, RouterProvider } from "react-router-dom";\nimport { registerMicroApps, loadMicroApp } from "./utils/single-spa.ts";\nimport { MICRO_APP_CONTAINER_ID, mockMicroApps } from "./utils/micros.ts";\n\n// 对 single-spa 的注册 API 进行了二次封装，支持传入数组进行批量注册\nregisterMicroApps(\n  // 根据后端提供的动态数据批量注册微应用\n  mockMicroApps.map((item) => ({\n    name: item.name,\n    app: () => {\n      // 通过动态 Script 的方式获取\n      return loadMicroApp(item);\n    },\n    activeWhen: item.router,\n    customProps: {\n      // 向微应用传递需要挂载的容器元素 ID\n      container: MICRO_APP_CONTAINER_ID,\n    },\n  }))\n);\n\nconst router = createBrowserRouter([\n  {\n    path: "/",\n    // <App /> 中提供了左侧导航栏和右侧内容区域的布局结构\n    element: <App />,\n    // children 中的元素会被渲染到 <App /> 的 <Outlet /> 中\n    // <Outlet> 是 react-router-dom 提供的一个组件，用于渲染子路由：https://reactrouter.com/en/main/components/outlet\n\n    // 遍历迭代 mockMicroApps 中的数据，生成对应的路由配置\n    // 这里的路由配置和微应用注册 API 中的 activeWhen 一致\n    children: mockMicroApps.map((item) => ({\n      path: item.router,\n      // 微应用的容器元素，用于渲染微应用\n      element: <div id={MICRO_APP_CONTAINER_ID}></div>,\n    })),\n  },\n]);\n\nconst root = ReactDOM.createRoot(document.getElementById("root")!);\nroot.render(<RouterProvider router={router} />);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n'})}),"\n",(0,i.jsxs)(e.p,{children:["在\xa0",(0,i.jsx)(e.code,{children:"src/utils/single-spa.ts"}),"\xa0中对 single-spa 的注册 API 进行二次封装使其支持批量注册："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'// 使用 Lerna 执行 lerna bootstrap 之后，本地 packages 中的应用可以通过 NPM 包的方式进行引入\n// 注意这里直接引入了开发态的入口文件，而不是打包后的文件\nimport { start, registerApplication } from "single-spa/src/single-spa";\nimport { LifeCycles, RegisterApplicationConfig } from "single-spa";\nimport { getMicroAppLifecycle } from "single-spa-lifecycle";\nimport { IMicroApp } from "../types";\n\n// 对 single-spa 的 registerApplication 进行二次封装，使其可以接收一个数组，批量注册微应用\nexport function registerMicroApps(apps: RegisterApplicationConfig[]) {\n  // @ts-ignore\n  // 如果不开启 __DEV__，single-spa 的源码无法正常运行\n  window.__DEV__ = true;\n  apps.forEach(registerApplication);\n  start();\n}\n\nexport function loadMicroApp(app: IMicroApp): Promise<LifeCycles> {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement("script");\n    // 微应用的入口文件\n    script.src = app.entry; \n    // 这里的代码是否还有优化的空间？\n    // 如何让微应用的生命周期初始化后立马可以在主应用中获取？\n    // 例如不需要等待 onload 事件触发\n    script.onload = () => {\n      // 这里的 app.name 和微应用注册生命周期函数时需要保持一致，仍然存在耦合性\n      // 从全局映射中获取生命周期函数\n      resolve(getMicroAppLifecycle(app.name)); \n    };\n    script.onerror = reject;\n    document.head.appendChild(script);\n  });\n}\n\n'})}),"\n",(0,i.jsxs)(e.p,{children:["最后在\xa0",(0,i.jsx)(e.code,{children:"<App>"}),"\xa0中对主应用进行布局设计，将左侧设计成能够切换路由的导航，导航的信息来源于微应用数据列表，右侧设计成用于渲染微应用的内容区："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'// src/App.js\nimport { Outlet, Link } from "react-router-dom";\nimport "./App.css";\nimport { mockMicroApps } from "./utils/micros";\n\nfunction App() {\n  return (\n    <div className="app">\n      <div className="app-nav">\n        <p>Micro App List</p>\n        <nav>\n          <ul>\n            {/* 遍历微应用的数据列表生成导航路由信息 */}\n            {mockMicroApps.map((item) => (\n              <li key={item.name}>\n                <Link to={item.router}>{item.title}</Link>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </div>\n      <div className="app-content">\n        {/* 这里的 <Outlet /> 会被 <RouterProvider router={router} /> 中 router 提供的 children 进行替换 */}\n        {/* 所以本质上会被微应用的容器元素 <div id={MICRO_APP_CONTAINER_ID}></div> 替代  */}\n        <Outlet />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,i.jsxs)(e.h2,{id:"动态-script-示例---微应用设计",children:["动态 Script 示例 - 微应用设计",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#动态-script-示例---微应用设计",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"在上一个课程中我们讲解了微应用的构建设计，为了使得主应用加载并执行微应用后可以识别生命周期对象，需要对微应用进行不同设计方案的 Webpack 构建处理，如下所示："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"温馨提示：在上一个课程的 NPM 方案中无法对构建应用进行代码分离，而对于动态 Script 和 Fetch 请求的加载方式，可以构建出多个 chunk 分离的 JS 文件和 CSS 文件，但是在注册 API 进行加载时需要按顺序执行。课程中为了简化加载逻辑，统一将微应用构建成单个 JS Bundle 进行加载。在下一个课程中我们会重点讲解 Webpack 的代码分离的实现原理，从而为了解后续的 qiankun 框架奠定基础。"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"本课程的 React 示例可以在上个课程示例的基础上进行更改，构建生成浏览器支持的 UMD 规范，如下所示："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// config/webpack.config.js\nmodule.exports = function(webpackEnv) {\n  // ...\n\n  // common function to get style loaders\n  const getStyleLoaders = (cssOptions, preProcessor) => {\n    const loaders = [\n      // 注释掉抽离 CSS 样式的插件功能\n      // isEnvDevelopment && require.resolve("style-loader"),\n      // isEnvProduction && {\n      //   loader: MiniCssExtractPlugin.loader,\n      //   // css is located in `static/css`, use \'../../\' to locate index.html folder\n      //   // in production `paths.publicUrlOrPath` can be a relative path\n      //   options: paths.publicUrlOrPath.startsWith(".")\n      //     ? { publicPath: "../../" }\n      //     : {},\n      // },\n      \n      require.resolve("style-loader"),\n      {\n        loader: require.resolve("css-loader"),\n        options: cssOptions,\n      },\n      // ...\n    ].filter(Boolean);\n    // ...\n    return loaders;\n  };\n  \n  return {\n    output: {\n      // ...\n      \n      // 更改为浏览器支持的 UMD 规范\n      library: {\n        type: \'umd\'\n      }\n    },\n\n    module: {\n      rules: [\n        {\n          oneOf: [\n            // TODO: Merge this config once `image/avif` is in the mime-db\n            // https://github.com/jshttp/mime-db\n            {\n              test: [/.avif$/],\n              mimetype: "image/avif",\n              // 内联处理\n              // https://webpack.js.org/guides/asset-modules/#inlining-assets\n              type: \'asset/inline\',\n            },\n            // "url" loader works like "file" loader except that it embeds assets\n            // smaller than specified limit in bytes as data URLs to avoid requests.\n            // A missing `test` is equivalent to a match.\n            {\n              test: [/.bmp$/, /.gif$/, /.jpe?g$/, /.png$/],\n              // 内联处理\n              type: \'asset/inline\',\n            },\n            {\n              test: /.svg$/,\n              // 内联处理\n              type: \'asset/inline\',\n\n              // 注释\n              \n              // use: [\n              //   {\n              //     loader: require.resolve("@svgr/webpack"),\n              //     options: {\n              //       prettier: false,\n              //       svgo: false,\n              //       svgoConfig: {\n              //         plugins: [{ removeViewBox: false }],\n              //       },\n              //       titleProp: true,\n              //       ref: true,\n              //     },\n              //   },\n              //   {\n              //     loader: require.resolve("file-loader"),\n              //     options: {\n              //        name: "static/media/[name].[hash].[ext]",\n              //     },\n              //   },\n              // ],\n              \n              issuer: {\n                and: [/.(ts|tsx|js|jsx|md|mdx)$/],\n              },\n            },\n          ]\n        }\n      ].filter(Boolean),\n    },\n\n    plugins: [\n      \n      // ...\n      \n      // 构建单个 JS 脚本\n      new webpack.optimize.LimitChunkCountPlugin({\n        maxChunks: 1,\n      }),\n    ].filter(Boolean),\n  }\n}\n'})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"温馨提示：在下一个课程中我们会重点了解详细的 UMD 规范运行时代码。"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["同时在 React 微应用的入口文件中调用 ",(0,i.jsx)(e.code,{children:"single-spa-lifecycle"})," 存储生命周期函数，如下所示："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// src/index.js\nimport React from "react";\nimport ReactDOM from "react-dom/client";\nimport { registerMicroAppLifecycle } from "single-spa-lifecycle";\nimport "./index.css";\nimport App from "./App";\n// import reportWebVitals from \'./reportWebVitals\';\n\nlet root;\n\n// 判断是否在 single-spa 的环境中运行\n// 如果不是，那么说明不在微前端的环境中，可以独立启动\nif (!window.singleSpaNavigate) {\n  root = ReactDOM.createRoot(document.getElementById("root"));\n  root.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n}\n\n/**\n * bootstrap 只会在微应用首次激活时调用一次\n * 微应用重新激活时会直接调用 mount 周期函数，不会再重复触发 bootstrap。\n * 通常情况下这里不需要进行任何处理，初始化的代码可以放在当前入口文件的顶层处理\n * 除非会执行微应用的 unload 动作，然后需要再次执行 bootstrap，可能需要在此做一些必要的初始化动作\n */\n\n// 注意这里的每一个生命周期函数必须是 async 函数\nasync function bootstrap() {\n  console.log("[React 子应用] bootstrap excuted");\n}\n\n/**\n * 微应用每次激活时都会调用 mount 周期函数，通常在这里执行微应用的渲染\n */\nasync function mount(props) {\n  console.log("[React 子应用] mount excuted, props: ", props);\n  // 在 single-spa 的注册 API 中会通过 customProps 传递 container 微应用容器元素 ID\n  // 因此这里将微应用挂载在主应用的容器元素上\n  root = ReactDOM.createRoot(document.getElementById(props.container));\n  root.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n}\n\n/**\n * 微应用每次失活时会调用 unmount 周期函数，通常在这里执行微应用的卸载\n */\nasync function unmount(props) {\n  console.log("[React 子应用] unmount excuted, props: ", props);\n  root && root.unmount();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n// 当微应用对应的 script 标签加载并执行后，将生命周期函数存储到全局映射中\nregisterMicroAppLifecycle("react", {\n  bootstrap,\n  mount,\n  unmount,\n});\n'})}),"\n",(0,i.jsx)(e.p,{children:"Vue 示例也需要进行更改，首先使其支持构建单个 Bundle 文件："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// vue.config.js\nconst { defineConfig } = require("@vue/cli-service");\nmodule.exports = defineConfig({\n  transpileDependencies: true,\n  css: { extract: false },\n  // 关闭 Webpack 的代码分离功能\n  configureWebpack: {\n    optimization: {\n      splitChunks: false,\n    },\n  },\n});\n'})}),"\n",(0,i.jsxs)(e.p,{children:["同时在 Vue 微应用的入口文件中调用 ",(0,i.jsx)(e.code,{children:"single-spa-lifecycle"})," 存储生命周期函数，如下所示："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'import { createApp } from "vue";\nimport { registerMicroAppLifecycle } from "single-spa-lifecycle";\nimport App from "./App.vue";\nlet app;\n\n// 判断是否在 single-spa 的环境中运行\n// 如果不是，那么说明不在微前端的环境中，可以独立启动\nif (!window.singleSpaNavigate) {\n  app = createApp(App);\n  app.mount("#app");\n}\n\n// 注意这里的每一个生命周期函数必须是 async 函数\nexport async function bootstrap() {\n  console.log("[Vue 子应用] bootstrap excuted");\n}\n\nexport async function mount(props) {\n  console.log("[Vue 子应用] mount excuted, props: ", props);\n  app = createApp(App);\n  app.mount(`#${props.container}`);\n}\n\nexport async function unmount(props) {\n  console.log("[Vue 子应用] unmount excuted, props: ", props);\n  app && app.unmount();\n}\n\n// 当微应用对应的 script 标签加载并执行后，将生命周期函数存储到全局映射中\nregisterMicroAppLifecycle("vue", {\n  bootstrap,\n  mount,\n  unmount,\n});\n'})}),"\n",(0,i.jsxs)(e.h2,{id:"小结",children:["小结",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["本课程主要讲解了如何使用 single-spa 实现动态 Script 的微前端示例，重点设计了一个通用的前端 SDK ",(0,i.jsx)(e.code,{children:"single-spa-lifecycle"})," 实现主应用获取微应用的生命周期函数，从而减少微前端的耦合。当然在使用 ",(0,i.jsx)(e.code,{children:"single-spa-lifecycle"})," 的过程中，主应用需要通过微应用的应用标识来获取相应的生命周期函数，仍然存在一定的耦合性。在下一个课程的 Fetch 请求方案中，我们会讲解一种更加通用的生命周期函数获取方案，从而去除应用标识形成彻底的解耦能力。"]})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}let d=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F20.%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90%EF%BC%9Asingle-spa%20%E7%9A%84%20Script%20%E7%A4%BA%E4%BE%8B.md"]={toc:[{text:"为什么需要 single-spa",id:"为什么需要-single-spa",depth:2},{text:"如何获取生命周期函数",id:"如何获取生命周期函数",depth:2},{text:"动态 Script 示例",id:"动态-script-示例",depth:2},{text:"动态 Script 示例 - 主应用设计",id:"动态-script-示例---主应用设计",depth:2},{text:"动态 Script 示例 - 微应用设计",id:"动态-script-示例---微应用设计",depth:2},{text:"小结",id:"小结",depth:2}],title:"20.框架解析：single-spa 的 Script 示例",headingTitle:"20.框架解析：single-spa 的 Script 示例",frontmatter:{}}}}]);