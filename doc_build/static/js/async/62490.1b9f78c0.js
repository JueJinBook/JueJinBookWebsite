"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["62490"],{558799:function(e,n,r){r.r(n),r.d(n,{default:()=>j});var i=r(552676),a=r(740453);let s=r.p+"static/image/5005660b73990a07553ba0811f42e359.6fb7ae72.webp",t=r.p+"static/image/d80acb32abc9ecf362653fa4db9d179c.9d0eaa24.webp",d=r.p+"static/image/f9318614169f597c7cac09bb11bde5f4.b49a437a.webp",o=r.p+"static/image/f0ef36d823fe44b62452229928bf3d32.c1e41395.webp",p=r.p+"static/image/dc43caea4799b1de6552d860ae6ee938.80ea159b.webp",l=r.p+"static/image/0ef5a2cc178c700f36beec1402d919cf.8a83c4e7.webp",c=r.p+"static/image/2e9d7618561539dcedacc3b527fd7972.32a12f4d.webp",g=r.p+"static/image/b9d1545864042c66d0f8dd9b1bc99f03.d3d0fb79.webp",h=r.p+"static/image/9d0e7a10fa21466f3de779955be096e7.83bd5842.webp",u=r.p+"static/image/6b753c9b5d8ddf480b704a052a6fb9fb.9f1b0113.webp";function x(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",ul:"ul",li:"li",pre:"pre",code:"code",h2:"h2",h3:"h3"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"20spring-boot-实践之整合-swagger-生成接口文档",children:["20.Spring Boot 实践之整合 Swagger 生成接口文档",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#20spring-boot-实践之整合-swagger-生成接口文档",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Swagger 是一款 RESTful 接口的文档在线自动生成+功能测试功能软件，本文将会介绍这款工具并在 Spring Boot 项目中集成 Swagger。"}),"\n",(0,i.jsx)(n.p,{children:"我们的新蜂商城 Vue 版本开发过程就一直在用 Swagger 这个工具，主要用来 生成接口文档以及进行接口测试工作，大家在运行源码后也可以通过 swagger-ui 页面看到新蜂商城的所有 API 文档，如下图所示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"本文主要知识点如下："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"认识 Swagger"}),"\n",(0,i.jsx)(n.li,{children:"Spring Boot 集成 Swagger"}),"\n",(0,i.jsx)(n.li,{children:"Swagger 接口测试"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tip",children:"本篇文章中所涉及的源码已经整理好并上传到百度云，地址和提取密码如下：\n链接: https://pan.baidu.com/s/1xZHvXMxvfdGNTYigu_mSYQ \n提取码: vcb9\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"什么是-swagger",children:["什么是 Swagger",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是-swagger",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"Swagger 为开发者提供了一套规范去定义接口和接口相关的信息，通过 springfox-swagger 依赖 jar 包可以将基于 Spring MVC 和 Spring Boot 项目的项目代码，自动生成 JSON 格式的描述文件，我们可以通过这套接口描述数据生成各种接口文档。"}),"\n",(0,i.jsx)(n.p,{children:"目前有很大一部分 Spring Boot 的开发者会将其用来构建 RESTful API，而我们构建RESTful API的目的通常都是由于多终端的原因，这些终端会共用很多底层业务逻辑，因此我们会抽象出这样一层来同时服务于多个移动端或者Web前端。这样一来，我们的RESTful API就有可能要面对多个开发人员或多个开发团队：iOS 开发、Android 开发或是Web开发等。为了减少与其他团队平时开发期间的频繁沟通成本，传统做法我们会创建一份 API 文档来记录所有接口细节，然而这样的做法有以下几个问题："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"由于接口众多，并且细节复杂（需要考虑不同的HTTP请求类型、HTTP头部信息、HTTP请求内容等），编写一份完整的 API 文档非常吃力。"}),"\n",(0,i.jsx)(n.li,{children:"随着时间推移，不断修改接口实现的时候都必须同步修改接口文档，维护起来十分麻烦。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"为了解决上面这样的问题，主要是简化开发人员的开发成本以及减少前后端开发人员之间的交流成本，就不得不提一下当前最流行的 API 管理工具 Swagger，你可以叫它“丝袜哥”。"}),"\n",(0,i.jsx)(n.p,{children:"Swagger 的目标是为 RESTful  API 定义一个标准的，与语言无关的接口，使人和计算机在看不到源码或者看不到文档或者不能通过网络流量检测的情况下能发现和理解各种服务的功能，在 Spring Boot 项目中集成 Swagger 可以使用注解来标记出需要在 API 文档中展示的信息，Swagger 会根据项目中标记的注解来生成对应的 API 文档。当然，不仅仅是 Spring Boot 项目，在其他技术栈的项目中也可以通过对应的整合方式去使用 Swagger。"}),"\n",(0,i.jsxs)(n.h2,{id:"swagger-可以做什么",children:["Swagger 可以做什么",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#swagger-可以做什么",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"有人熟悉 Swagger 这个工具，也有很多人并不熟悉这个工具，但是大部分人通常都把它当做一个接口文档的生成和展示工具，但是它能够做的事情并不止于此，在 Swagger 的官网里就列举出了它能做的事情，见下图："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"总结如下："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"辅助接口设计"}),"\n",(0,i.jsx)(n.li,{children:"辅助接口开发"}),"\n",(0,i.jsx)(n.li,{children:"生成接口文档"}),"\n",(0,i.jsx)(n.li,{children:"进行接口测试"}),"\n",(0,i.jsx)(n.li,{children:"Mock 接口"}),"\n",(0,i.jsx)(n.li,{children:"接口管理"}),"\n",(0,i.jsx)(n.li,{children:"接口检测"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Swagger 的功能确实非常强大，它可以轻松的整合到 Spring Boot 中并生成 RESTful API文档，既可以减少我们创建文档的工作量，同时说明内容又整合入实现代码中，让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时方便的修改文档说明，另外 Swagger 也提供了强大的页面测试功能来调试每个 API 接口。"}),"\n",(0,i.jsx)(n.p,{children:"总结下来就是非常方便，能够给开发人员带来极大的便利，因此我也非常推荐大家在项目中使用 Swagger 来维护接口文档。"}),"\n",(0,i.jsxs)(n.h2,{id:"spring-boot-整合-swagger",children:["Spring Boot 整合 Swagger",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#spring-boot-整合-swagger",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"介绍完 Swagger，接下来我会进行实际的编码，通过一个 Demo 让大家快速的体验到 Swagger 在项目中的使用。"}),"\n",(0,i.jsxs)(n.h3,{id:"依赖文件",children:["依赖文件",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#依赖文件",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"首先，在 pom.xml 中加入 Swagger 的依赖信息，pom.xml 文件更新如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n	<modelVersion>4.0.0</modelVersion>\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>2.3.7.RELEASE</version>\n		<relativePath/> \x3c!-- lookup parent from repository --\x3e\n	</parent>\n	<groupId>ltd.newbee.mall</groupId>\n	<artifactId>swagger-demo</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<name>swagger-demo</name>\n	<description>Demo project for Spring Boot</description>\n\n	<properties>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n		\x3c!-- swagger2 --\x3e\n		<dependency>\n			<groupId>io.springfox</groupId>\n			<artifactId>springfox-swagger2</artifactId>\n			<version>2.8.0</version>\n		</dependency>\n		<dependency>\n			<groupId>io.springfox</groupId>\n			<artifactId>springfox-swagger-ui</artifactId>\n			<version>2.8.0</version>\n		</dependency>\n		\x3c!-- swagger2 --\x3e\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n	</dependencies>\n\n    <repositories>\n        <repository>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <url>http://maven.aliyun.com/nexus/content/repositories/central/</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n    </repositories>	\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n</project>\n\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"创建-swagger-配置类",children:["创建 Swagger 配置类",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-swagger-配置类",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"新建 config 包，在 config 包中新增 Swagger2Config.java，代码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package ltd.newbee.mall.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@Configuration\n@EnableSwagger2\npublic class Swagger2Config {\n\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage("ltd.newbee.mall.controller"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title("swagger-api文档")\n                .description("swagger文档 by 13")\n                .version("1.0")\n                .build();\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"如上代码所示，类上的两个注解含义为："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"@Configuration，启动时加载此类"}),"\n",(0,i.jsx)(n.li,{children:"@EnableSwagger2，表示此项目启用 Swagger API 文档"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"api() 方法用于返回实例 Docket（Swagger API 摘要），也是在该方法中指定需要扫描的控制器包路径，只有此路径下的 Controller 类才会自动生成 Swagger API 文档。"}),"\n",(0,i.jsx)(n.p,{children:"apiInfo() 方法中主要是配置一些基础信息，包括配置页面展示的基本信息包括，标题、描述、版本、服务条款、联系方式等。"}),"\n",(0,i.jsx)(n.p,{children:"配置完成之后启动项目，在浏览器中输入网址 /swagger-ui.html，即可看到 Swagger 页面，效果如下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:""})}),"\n",(0,i.jsx)(n.p,{children:'此时只有基础的配置信息，并没有文档信息，接下来我们需要在我们配置的 basePackage("ltd.newbee.mall.controller") 包中新建 Controller 类。'}),"\n",(0,i.jsxs)(n.h3,{id:"创建-controller-类并新增接口信息",children:["创建 Controller 类并新增接口信息",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-controller-类并新增接口信息",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"在 controller 包下新增 TestSwaggerController.java，代码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package ltd.newbee.mall.controller;\n\nimport ltd.newbee.mall.entity.User;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.*;\n\n@RestController\npublic class TestSwaggerController {\n\n    static Map<Integer, User> usersMap = Collections.synchronizedMap(new HashMap<Integer, User>());\n\n    // 初始化 usersMap\n    static {\n        User user = new User();\n        user.setId(1);\n        user.setName("newbee1");\n        user.setPassword("111111");\n        User user2 = new User();\n        user2.setId(2);\n        user2.setName("newbee2");\n        user2.setPassword("222222");\n        usersMap.put(1, user);\n        usersMap.put(2, user2);\n    }\n\n    @ApiOperation(value = "获取用户列表", notes = "")\n    @GetMapping("/users")\n    public List<User> getUserList() {\n        List<User> users = new ArrayList<User>(usersMap.values());\n        return users;\n    }\n\n    @ApiOperation(value = "新增用户", notes = "根据User对象新增用户")\n    @ApiImplicitParam(name = "user", value = "用户实体", required = true, dataType = "User")\n    @PostMapping("/users")\n    public String postUser(@RequestBody User user) {\n        usersMap.put(user.getId(), user);\n        return "新增成功";\n    }\n\n    @ApiOperation(value = "获取用户详细信息", notes = "根据id来获取用户详细信息")\n    @ApiImplicitParam(name = "id", value = "用户id", required = true, dataType = "int")\n    @GetMapping("/users/{id}")\n    public User getUser(@PathVariable Integer id) {\n        return usersMap.get(id);\n    }\n\n    @ApiOperation(value = "更新用户详细信息", notes = "")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = "id", value = "用户id", required = true, dataType = "int"),\n            @ApiImplicitParam(name = "user", value = "用户实体user", required = true, dataType = "User")\n    })\n    @PutMapping("/users/{id}")\n    public String putUser(@PathVariable Integer id, @RequestBody User user) {\n        User tempUser = usersMap.get(id);\n        tempUser.setName(user.getName());\n        tempUser.setPassword(user.getPassword());\n        usersMap.put(id, tempUser);\n        return "更新成功";\n    }\n\n    @ApiOperation(value = "删除用户", notes = "根据id删除对象")\n    @ApiImplicitParam(name = "id", value = "用户id", required = true, dataType = "int")\n    @DeleteMapping("/users/{id}")\n    public String deleteUser(@PathVariable Integer id) {\n        usersMap.remove(id);\n        return "删除成功";\n    }\n\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["我们新增了一个 controller 类并定义了 5 个接口，并且在每个接口上通过",(0,i.jsx)(n.code,{children:"@ApiOperation"}),"注解来给API增加说明、通过",(0,i.jsx)(n.code,{children:"@ApiImplicitParams"}),"、",(0,i.jsx)(n.code,{children:"@ApiImplicitParam"}),"注解来给参数增加说明。"]}),"\n",(0,i.jsxs)(n.h2,{id:"接口测试",children:["接口测试",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#接口测试",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"在介绍 Swagger 的时候我们就说过，它不仅仅是一个接口文档工具，它也是一个接口测试工具，我们可以通过它向后端发送请求、传输参数并获取返回数据，通过这种方式我们也能够进行接口测试，接下来对这些接口进行实际的测试。"}),"\n",(0,i.jsxs)(n.h3,{id:"用户列表接口",children:["用户列表接口",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户列表接口",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"首先我们点进列表接口，接口的右上方有 Try it out 按钮："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"点击它来准备发送用户列表接口请求，之后页面上会出现 Execute 按钮："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"点击它之后会实际的向后端发送用户列表请求，请求成功后可以在页面中看到请求信息，以及返回数据，在 Response body 信息框中我们可以看到两条用户数据，接口请求成功且数据如预期中的数据一致，证明这个接口是没有问题的。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsxs)(n.h3,{id:"用户添加接口",children:["用户添加接口",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户添加接口",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"首先我们点进新增接口，接口的右上方有 Try it out 按钮，点击它来尝试发送请求，由于这个接口需要传输用户数据，因此页面上会出现用户信息录入框，我们在这里依次填写需要添加的用户数据，之后页面上会出现 Execute 按钮，点击它之后会实际的向后端发送用户添加请求，请求成功后可以在页面中看到添加成功。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"为了验证是否已经添加成功，我们再去请求依次用户列表请求，此时 Response body 信息框中我们可以看到 3 条用户数据，接口请求成功且数据如预期中的数据一致，证明用户添加这个接口也是没有问题的。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsxs)(n.h3,{id:"用户详情接口",children:["用户详情接口",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户详情接口",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"点进用户详情接口，接口的右上方有 Try it out 按钮，点击它来尝试发送请求，由于这个接口需要传输用户 id，因此页面上会出现 id 录入框，我们在这里想要查询 id 为 4 的用户数据就在信息录入框中输入 4，之后页面上会出现 Execute 按钮，点击它之后会实际的向后端发送用户详情信息请求，请求成功后可以在页面中看到 id 为 4 的用户数据："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:s,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"接口请求成功且数据如预期中的数据一致，证明用户详情这个接口也是没有问题的。"}),"\n",(0,i.jsxs)(n.h3,{id:"用户更新接口",children:["用户更新接口",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户更新接口",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"测试过程与用户添加接口类似，省略。"}),"\n",(0,i.jsxs)(n.h3,{id:"用户删除接口",children:["用户删除接口",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户删除接口",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"测试过程与用户详情类似，删除成功后可以再次请求列表接口确认接口的实现逻辑是否正确。"}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"由于用户更新接口和用户删除接口的操作过程与前面的几个类似因此选择了省略，同学们可以自行测试。"}),"\n",(0,i.jsx)(n.p,{children:"同时，你也可以根据本文内容多写几个 Controller 类来熟悉一下 Swagger，多多练习才能进步。"})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}let j=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F20.Spring%20Boot%20%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%95%B4%E5%90%88%20Swagger%20%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3.md"]={toc:[{text:"什么是 Swagger",id:"什么是-swagger",depth:2},{text:"Swagger 可以做什么",id:"swagger-可以做什么",depth:2},{text:"Spring Boot 整合 Swagger",id:"spring-boot-整合-swagger",depth:2},{text:"依赖文件",id:"依赖文件",depth:3},{text:"创建 Swagger 配置类",id:"创建-swagger-配置类",depth:3},{text:"创建 Controller 类并新增接口信息",id:"创建-controller-类并新增接口信息",depth:3},{text:"接口测试",id:"接口测试",depth:2},{text:"用户列表接口",id:"用户列表接口",depth:3},{text:"用户添加接口",id:"用户添加接口",depth:3},{text:"用户详情接口",id:"用户详情接口",depth:3},{text:"用户更新接口",id:"用户更新接口",depth:3},{text:"用户删除接口",id:"用户删除接口",depth:3},{text:"总结",id:"总结",depth:2}],title:"20.Spring Boot 实践之整合 Swagger 生成接口文档",headingTitle:"20.Spring Boot 实践之整合 Swagger 生成接口文档",frontmatter:{}}}}]);